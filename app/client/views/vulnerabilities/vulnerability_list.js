// Copyright (c) 2013 Tom Steele, Dan Kottmann, FishNet Security
// See the file license.txt for copying permission

Template.vulnerabilityList.projectId = function() {
  return Session.get('projectId');
};

Template.vulnerabilityList.vulnerabilities = function() {
  var query = {"project_id": Session.get('projectId'), "status": {"$in": []}};
  if (!Session.equals('vulnerabilityListStatusButtongrey', 'disabled')) {
    query.status.$in.push('lair-grey');
  }
  if (!Session.equals('vulnerabilityListStatusButtonblue', 'disabled')) {
    query.status.$in.push('lair-blue');
  }
  if (!Session.equals('vulnerabilityListStatusButtongreen', 'disabled')) {
    query.status.$in.push('lair-green');
  }
  if (!Session.equals('vulnerabilityListStatusButtonorange', 'disabled')) {
    query.status.$in.push('lair-orange');
  }
  if (!Session.equals('vulnerabilityListStatusButtonred', 'disabled')) {
    query.status.$in.push('lair-red');
  }
  var search = Session.get('vulnerabilitySearch');
  if (search) {
    query.$or = [
      {"cvss": {"$regex": search, "$options": "i"}},
      {"title": {"$regex": search, "$options": "i"}},
      {"last_modified_by": {$regex: search, "$options": "i"}}
    ];
  }
  var vulns = Vulnerabilities.find(query, {sort: {"cvss": -1, "title": 1}}).fetch();
  if (!vulns) {
    return false
  }
  vulns.forEach(addVulnRating);
  vulns.forEach(function(v) {v.count = v.hosts.length;});
  return vulns;
};

Template.vulnerabilityList.searchTerm = function() {
  return Session.get('vulnerabilitySearch');
};

Template.vulnerabilityList.vulnerabilityListStatusButtonActive = function(status) {
  if (Session.equals('vulnerabilityListStatusButton' + status, 'disabled')) {
    return 'disabled';
  }
  return false;
};

Template.vulnerabilityList.events({
  'click .vulnerability-status-button': function(event) {
    var id = 'vulnerabilityListStatusButton' + event.toElement.id;
    if (Session.equals(id, null)) {
      return Session.set(id, 'disabled');
    }
    return Session.set(id, null);
  },

  'keyup #vulnerability-list-search': function(event, tpl)  {
    Session.set('vulnerabilitySearch', tpl.find('#vulnerability-list-search').value.replace(/[^a-zA-Z0-9\s]/g, ''));
  },

  'click .vulnerability-status': function() {
    var newStatus = STATUS_MAP[STATUS_MAP.indexOf(this.status) + 1];
    if (STATUS_MAP.indexOf(this.status) + 1 > 4) {
      newStatus = STATUS_MAP[0];
    }
    Meteor.call('setVulnerabilityStatus', Session.get('projectId'), this._id, newStatus);
  },

  'click #remove-vulnerabilities': function() {
    var projectId = Session.get('projectId');
    var vulnerabilityIds = [];
    var inputs = $('.vulnerability-checked');
    inputs.each(function(){
      if ($(this).is(':checked')) {
        vulnerabilityIds.push($(this).attr('id'));
      }
    });
    vulnerabilityIds.forEach(function(id) {
      Meteor.call('removeVulnerability', projectId, id);
    });
  }
});
